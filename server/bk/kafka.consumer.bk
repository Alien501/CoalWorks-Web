import { Kafka } from 'kafkajs';
import dotenv from 'dotenv';

dotenv.config();

const kafka = new Kafka({
  clientId: 'iot-consumer',
  brokers: [process.env.KAFKA_BROKER || 'localhost:9093']
});

const consumer = kafka.consumer({ groupId: 'iot-group' });

const run = async () => {
  await consumer.connect();
  console.log('Consumer connected to Kafka');

  await consumer.subscribe({ topic: 'iot-data', fromBeginning: true });
  console.log('Subscribed to topic: iot-data');

  await consumer.run({
    eachMessage: async ({ topic, partition, message }) => {
      const messageValue = message.value.toString();
      console.log({
        topic,
        partition,
        offset: message.offset,
        value: messageValue,
      });

      try {
        const parsedMessage = JSON.parse(messageValue);
        console.log('Parsed message:', parsedMessage);

        // Here you can add your own logic to process the message
        // For example, you could store it in a database or trigger some action

      } catch (error) {
        console.error('Error parsing message:', error);
      }
    },
  });
};

run().catch(console.error);

// Graceful shutdown
const errorTypes = ['unhandledRejection', 'uncaughtException'];
const signalTraps = ['SIGTERM', 'SIGINT', 'SIGUSR2'];

errorTypes.forEach(type => {
  process.on(type, async (e) => {
    try {
      console.log(`process.on ${type}`);
      console.error(e);
      await consumer.disconnect();
      process.exit(0);
    } catch (_) {
      process.exit(1);
    }
  });
});

signalTraps.forEach(type => {
  process.once(type, async () => {
    try {
      await consumer.disconnect();
    } finally {
      process.kill(process.pid, type);
    }
  });
});